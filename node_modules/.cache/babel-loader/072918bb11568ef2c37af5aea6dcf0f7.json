{"ast":null,"code":"var _jsxFileName = \"C:\\\\meusprojetos\\\\baralho\\\\baralho-cartas\\\\src\\\\Context\\\\DeckContext.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DeckContext = /*#__PURE__*/createContext({});\nexport function DeckProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [id, setId] = useState(\"\");\n  const [cards, setCards] = useState([]);\n  const [success, setSuccess] = useState(true);\n  const [rotate, setRotate] = useState([]);\n\n  function rand() {\n    return Math.floor(Math.random() * 360 + 1);\n  }\n\n  async function getData() {\n    let res = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle');\n    let data = res.data;\n    setId(data.deck_id);\n  }\n\n  async function startDeck() {\n    let card = await axios.get(`https://deckofcardsapi.com/api/deck/${id}/draw/?count=5`);\n    setCards([...cards, ...card.data.cards]);\n    setRotate([...rotate, rand()]);\n    setSuccess(card.data.success);\n  }\n\n  async function addCard() {\n    let card = await axios.get(`https://deckofcardsapi.com/api/deck/${id}/draw`);\n    setCards([...cards, ...card.data.cards]);\n    setRotate([...rotate, rand()]);\n    setSuccess(card.data.success);\n  }\n\n  return /*#__PURE__*/_jsxDEV(DeckContext.Provider, {\n    value: {\n      cards,\n      startDeck,\n      addCard,\n      success,\n      rotate,\n      getData,\n      id\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeckProvider, \"JGFrV5eex92bMnarJp/HPgnu8nM=\");\n\n_c = DeckProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckProvider\");","map":{"version":3,"names":["axios","createContext","useState","DeckContext","DeckProvider","children","id","setId","cards","setCards","success","setSuccess","rotate","setRotate","rand","Math","floor","random","getData","res","get","data","deck_id","startDeck","card","addCard"],"sources":["C:/meusprojetos/baralho/baralho-cartas/src/Context/DeckContext.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { createContext, ReactNode, useEffect, useState } from \"react\";\r\n\r\n\r\ninterface DeckContextData {\r\n   cards: Card[],\r\n   startDeck : () => void,\r\n   addCard : () => void, \r\n   success: boolean,\r\n   rotate: Number[],\r\n   getData: () => void,\r\n   id: string\r\n\r\n}\r\n\r\ninterface DeckProviderProps {\r\n    children: ReactNode;\r\n    \r\n}\r\n\r\ninterface Card {\r\n\r\n    image: string,\r\n    value: string,\r\n    suit:  string,\r\n    code:  string,\r\n}\r\n\r\n\r\n\r\nexport const DeckContext = createContext({} as DeckContextData);\r\n\r\nexport function DeckProvider({children}: DeckProviderProps) {\r\n\r\n    const [id, setId] = useState(\"\")\r\n    const [cards, setCards] = useState([] as Card[])\r\n    const [success, setSuccess] = useState(true)\r\n    const [rotate, setRotate] = useState([] as Number[])\r\n\r\n    function rand() {\r\n        return Math.floor(Math.random() * 360 + 1);\r\n    }\r\n\r\n   \r\n    async function getData() {\r\n        let res = await axios.get('https://deckofcardsapi.com/api/deck/new/shuffle')\r\n        let data = res.data;\r\n        setId(data.deck_id)\r\n    }\r\n    \r\n    async function startDeck() {\r\n        let card = await axios.get(`https://deckofcardsapi.com/api/deck/${id}/draw/?count=5`)\r\n        setCards([...cards, ...card.data.cards])\r\n        setRotate([...rotate, rand()])\r\n        setSuccess(card.data.success)\r\n    }\r\n\r\n    async function addCard() {\r\n        let card = await axios.get(`https://deckofcardsapi.com/api/deck/${id}/draw`)\r\n        setCards([...cards, ...card.data.cards])\r\n        setRotate([...rotate, rand()])\r\n        setSuccess(card.data.success)\r\n    }\r\n    \r\n\r\n    return (\r\n        <DeckContext.Provider value={{\r\n            cards,\r\n            startDeck,\r\n            addCard,\r\n            success,\r\n            rotate,\r\n            getData,\r\n            id,\r\n            \r\n        }}>\r\n            {children}\r\n        </DeckContext.Provider>\r\n    )\r\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAA8CC,QAA9C,QAA8D,OAA9D;;AA6BA,OAAO,MAAMC,WAAW,gBAAGF,aAAa,CAAC,EAAD,CAAjC;AAEP,OAAO,SAASG,YAAT,OAAqD;EAAA;;EAAA,IAA/B;IAACC;EAAD,CAA+B;EAExD,MAAM,CAACC,EAAD,EAAKC,KAAL,IAAcL,QAAQ,CAAC,EAAD,CAA5B;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;;EAEA,SAASY,IAAT,GAAgB;IACZ,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAAhB,GAAsB,CAAjC,CAAP;EACH;;EAGD,eAAeC,OAAf,GAAyB;IACrB,IAAIC,GAAG,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAAU,iDAAV,CAAhB;IACA,IAAIC,IAAI,GAAGF,GAAG,CAACE,IAAf;IACAd,KAAK,CAACc,IAAI,CAACC,OAAN,CAAL;EACH;;EAED,eAAeC,SAAf,GAA2B;IACvB,IAAIC,IAAI,GAAG,MAAMxB,KAAK,CAACoB,GAAN,CAAW,uCAAsCd,EAAG,gBAApD,CAAjB;IACAG,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGgB,IAAI,CAACH,IAAL,CAAUb,KAAxB,CAAD,CAAR;IACAK,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYE,IAAI,EAAhB,CAAD,CAAT;IACAH,UAAU,CAACa,IAAI,CAACH,IAAL,CAAUX,OAAX,CAAV;EACH;;EAED,eAAee,OAAf,GAAyB;IACrB,IAAID,IAAI,GAAG,MAAMxB,KAAK,CAACoB,GAAN,CAAW,uCAAsCd,EAAG,OAApD,CAAjB;IACAG,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGgB,IAAI,CAACH,IAAL,CAAUb,KAAxB,CAAD,CAAR;IACAK,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAYE,IAAI,EAAhB,CAAD,CAAT;IACAH,UAAU,CAACa,IAAI,CAACH,IAAL,CAAUX,OAAX,CAAV;EACH;;EAGD,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MACzBF,KADyB;MAEzBe,SAFyB;MAGzBE,OAHyB;MAIzBf,OAJyB;MAKzBE,MALyB;MAMzBM,OANyB;MAOzBZ;IAPyB,CAA7B;IAAA,UAUKD;EAVL;IAAA;IAAA;IAAA;EAAA,QADJ;AAcH;;GA/CeD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}